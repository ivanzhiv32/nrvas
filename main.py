import json
import pandas as pd
import requests
import telebot.types
from datetime import datetime

from telebot import types
from telebot.types import ReplyKeyboardRemove
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from time import sleep

# https://api.telegram.org/bot7541371307:AAHfbOo47fs-eSGfVN63CeCg_bUvMKRaIRI/getUpdates
TOKEN = '7541371307:AAHfbOo47fs-eSGfVN63CeCg_bUvMKRaIRI'
bot = telebot.TeleBot(TOKEN)

time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
print(f"{time}\nProcessing...")


class Candidate:
    idUser = 0
    surname = ''
    name = ''
    patronymic = ''
    date_birth = ''
    mil_station = ''
    university = ''
    field_study = ''
    average_score = ''
    status = ''
    type_recruitment = ''
    find_out = ''
    phone_number = ''

    def add_to_excel(self):
        wb = load_workbook('documents/candidate.xlsx')
        sheet = wb.active
        rows_count = sheet.max_row
        data = (rows_count, self.surname, self.name, self.patronymic, self.date_birth,
                self.mil_station, self.university, self.field_study, self.average_score,
                self.status, self.type_recruitment, self.find_out, self.phone_number)
        sheet.append(data)

        wb.save(filename='documents/candidate.xlsx')


candidate = Candidate()


@bot.message_handler(commands=["start"])
def start(message):
    sticker = open('stickers/welcome_bender.tgs', 'rb')
    bot.send_sticker(message.chat.id, sticker)

    if message.from_user.last_name is None:
        welcome_name = f'{message.from_user.first_name}'
    else:
        welcome_name = f'{message.from_user.first_name} {message.from_user.last_name}'

    welcome_msg = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {welcome_name}\n –Ø - SciComBot, –∏ —è –ø—Ä–æ–≤–æ–∂—É –æ—Ç–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –Ω–∞—É—á–Ω—É—é —Ä–æ—Ç—É.\n–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å —Ä–∞–∑–¥–µ–ª üëá'

    go_to_main_menu(message, welcome_msg)


def go_to_main_menu(message, msg):
    if message.from_user.id == 510572383:
        is_admin = True
    else:
        is_admin = False

    kb_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)

    kb_about = types.KeyboardButton("#–û_–Ω–∞—Å")
    kb_faq = types.KeyboardButton("FAQ")
    kb_tg_channel = types.KeyboardButton("Telegram-–∫–∞–Ω–∞–ª")
    kb_ask = types.KeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å')
    kb_get_reg = types.KeyboardButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    kb_get_docs = types.KeyboardButton("–†—É–∫–æ–≤–æ–¥—è—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
    kb_question = types.KeyboardButton("–í—Ö–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")

    if is_admin == True:
        kb_markup.add(kb_get_reg).row(kb_faq, kb_tg_channel, kb_about).add(kb_get_docs).add(kb_ask).add(kb_question)
    else:
        kb_markup.add(kb_get_reg).row(kb_faq, kb_tg_channel, kb_about).add(kb_get_docs).add(kb_ask)
    bot.send_message(message.chat.id, msg.format(message.from_user), parse_mode='html',
                     reply_markup=kb_markup)


@bot.message_handler(content_types=["text"])
def welcome(message):
    if message.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è':
        bot.send_message(message.chat.id, '–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', reply_markup=ReplyKeyboardRemove())
        type_recruitment(message)
    elif message.text == 'Telegram-–∫–∞–Ω–∞–ª':
        bot.send_message(message.chat.id, "https://t.me/+ntFED2PMwUo2MDZi")
    elif message.text == '#–û_–Ω–∞—Å':
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
    elif message.text == '–í—Ö–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã':
        df = excel_to_2d_array('questions.xlsx')
        page = 1
        count = len(df) - 1

        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data="{\"method\":\"answer\",\"NumberPage\":"
                                                                       + str(page) + "}"))
        markup.add(InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '),
                   InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ --->',
                                        callback_data="{\"method\":\"questions\",\"NumberPage\":" + str(
                                            page + 1) + ",\"CountPage\":" + str(count) + "}"))

        bot.send_message(message.from_user.id, f'<b>{df[3][page]}</b>\n\n',
                         parse_mode="HTML", reply_markup=markup)
    elif message.text == 'FAQ':
        df = excel_to_2d_array('faq.xlsx')
        # count = len(df) - 1
        page = 1

        count_pages = (len(df) - 1) // 4
        if (len(df) - 1) % 4 != 0:
            count_pages += 1

        markup = InlineKeyboardMarkup()
        i = 1
        while i <= 4:
            question = df[1][i]
            answer = df[2][i]
            markup.add(
                InlineKeyboardButton(text=question, callback_data='{\"method\":\"faq\",\"index\":' + str(i) + '}'))
            i += 1
        markup.add(InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å', callback_data='unseen'))
        markup.add(InlineKeyboardButton(text=f'{page}/{count_pages}', callback_data=f' '),
                   InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ --->',
                                        callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                            page + 1) + ",\"IndexQuestion\":" + str(i) + "}"))
        bot.send_message(message.chat.id, text=f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å</b>', parse_mode="HTML",
                         reply_markup=markup)

    elif message.text == '–†—É–∫–æ–≤–æ–¥—è—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã':
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton("–°—Å—ã–ª–∫–∞", url='https://www.consultant.ru/document/cons_doc_LAW_18260/')
        markup.add(button1)

        bot.send_message(message.chat.id,
                         text='–§–ó ‚Ññ 53 ¬´–û –≤–æ–∏–Ω—Å–∫–æ–π –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ¬ª –æ—Ç 28.03.1998 (—Ä–µ–¥. 02.10.2024)',
                         reply_markup=markup)
    elif message.text == '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å':
        # kb_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        bot.send_message(message.from_user.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å', reply_markup=ReplyKeyboardRemove())
        bot.register_next_step_handler(message, get_question)
    elif message.text == 'id':
        candidate.idUser = message.from_user.id
        bot.send_message(message.chat.id, text=str(candidate.idUser))


def get_question(message):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ Excel —Ç–∞–±–ª–∏—Ü—É (–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞, id –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—è, –º–µ—Ç–∫–∞ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞, –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç)
    id = question_to_excel(message)
    # bot.send_message(message.from_user.id,
                     # text='–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å, –æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç—è—Ç –∏ –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.')
    go_to_main_menu(message, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å, –æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É. –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç—è—Ç –∏ –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.')

    # markup = types.InlineKeyboardButton()
    # markup.add(InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å', callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
    #                                                     page + 1) + ",\"IndexQuestion\":" + str(index) + "}"))
    bot.send_message(510572383, '–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')


def get_answer(message, page, question, id):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∫ —Å—Ç—Ä–æ–∫–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –≤ Excel —Ç–∞–±–ª–∏—Ü–µ (–ù–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞, id –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—è, –º–µ—Ç–∫–∞ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞, –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç)
    del_question(page + 1)


    bot.send_message(id, text=f'<b>–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –Ω–∞—É—á–Ω–æ–π —Ä–æ—Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å.</b>\n' + question + '\n' + message.text, parse_mode="HTML")
    go_to_main_menu(message, '–û—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')


# def updateVolumes(df, number, id_user, is_ready, question, answer):
#     try:
#        df.loc[author][item] += amount
#     except KeyError:
#        df = pd.concat([df,pd.DataFrame([amount], index=[author], columns=[item])]).fillna(0)

def del_question(id):
    wb = load_workbook('documents/questions.xlsx')
    sheet = wb.active
    rows_count = sheet.max_row
    sheet.delete_rows(id)

    wb.save(filename='documents/questions.xlsx')

def question_to_excel(message):
    wb = load_workbook('documents/questions.xlsx')
    sheet = wb.active
    rows_count = sheet.max_row
    data = (rows_count, message.from_user.id, False, message.text)
    sheet.append(data)

    wb.save(filename='documents/questions.xlsx')
    return rows_count


def get_surname(message):
    candidate.surname = message.text
    bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    bot.register_next_step_handler(message, get_name)
    bot.delete_message(chat_id=message.chat.id, message_id=message.id - 1)


def get_name(message):
    candidate.name = message.text
    bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ')
    bot.register_next_step_handler(message, get_patronymic)
    bot.delete_message(chat_id=message.chat.id, message_id=message.id - 1)


def get_patronymic(message):
    candidate.patronymic = message.text
    bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≤–æ–µ–Ω–Ω–æ–≥–æ –∫–æ–º–∏—Å—Å–∞—Ä–∏–∞—Ç–∞')
    bot.register_next_step_handler(message, get_military_station)
    bot.delete_message(chat_id=message.chat.id, message_id=message.id - 1)


def get_military_station(message):
    candidate.mil_station = message.text
    bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –í–£–ó–∞')
    bot.register_next_step_handler(message, get_university)
    bot.delete_message(chat_id=message.chat.id, message_id=message.id - 1)


def get_university(message):
    candidate.university = message.text
    bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤ –í–£–ó–µ')
    bot.register_next_step_handler(message, get_field_study)
    bot.delete_message(chat_id=message.chat.id, message_id=message.id - 1)


def get_field_study(message):
    candidate.field_study = message.text
    bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –¥–∏–ø–ª–æ–º—É (—Ö.—Ö)')
    bot.register_next_step_handler(message, get_average_score)
    bot.delete_message(chat_id=message.chat.id, message_id=message.id - 1)


def get_average_score(message):
    try:
        score = float(message.text.replace(',', '.'))
        if score < 4:
            bot.send_message(message.from_user.id, '–í–∞—à —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.\n'
                                                   '–í –Ω–∞—É—á–Ω—É—é —Ä–æ—Ç—É —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Å–æ —Å—Ä–µ–¥–Ω–∏–º –±–∞–ª–ª–æ–º –Ω–µ –º–µ–Ω–µ–µ 4.0')
            return
        elif score > 5:
            bot.send_message(message.from_user.id, '–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
            bot.register_next_step_handler(message, get_average_score)
            return
        candidate.average_score = message.text
        bot.send_message(message.from_user.id, '–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?')
        bot.register_next_step_handler(message, get_find_out)
        bot.delete_message(chat_id=message.chat.id, message_id=message.id - 1)
    except ValueError:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∞–ª–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        bot.register_next_step_handler(message, get_average_score)


def get_find_out(message):
    candidate.find_out = message.text

    kb_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)

    kb_get_contact = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)

    kb_markup.add(kb_get_contact)
    bot.send_message(message.chat.id, parse_mode='html',
                     text='–î–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏, –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —á–∞—Ç',
                     reply_markup=kb_markup)

    bot.register_next_step_handler(message, send_docs)
    bot.delete_message(chat_id=message.chat.id, message_id=message.id - 1)


def send_docs(message):
    candidate.phone_number = message.contact.phone_number
    bot.send_message(message.from_user.id, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤–∞—à–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è '
                                           '–≤ –Ω–∞—É—á–Ω—É—é —Ä–æ—Ç—É –í–æ–µ–Ω–Ω–æ–π –∞–∫–∞–¥–µ–º–µ–∏–∏ —Å–≤—è–∑–∏ –∏–º –°.–ú. –ë—É–¥–µ–Ω–Ω–æ–≥–æ')

    bot.delete_message(chat_id=message.chat.id, message_id=message.id - 1)
    candidate.add_to_excel()
    go_to_main_menu(message, '–î–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤ –æ—Ç–±–æ—Ä–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã')
    bot.send_document(message.chat.id, open(r'documents/–õ–∏—Å—Ç —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.docx', 'rb'))
    bot.send_document(message.chat.id, open(r'documents/–°–æ–≥–ª–∞—Å–∏–µ.docx', 'rb'))
    bot.send_message(510572383, text=f'<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ</b>\n' +
                                     '–§–ò–û: ' +
                                     candidate.surname + ' ' +
                                     candidate.name + ' ' +
                                     candidate.patronymic + '\n' +
                                     '–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: ' +
                                     candidate.university + '\n' +
                                     '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ' +
                                     candidate.phone_number,
                     parse_mode="HTML")


def type_recruitment(message):
    markup = types.InlineKeyboardMarkup(row_width=2)

    but_winter = types.InlineKeyboardButton("–ó–∏–º–Ω–∏–π", callback_data='winter')
    but_summer = types.InlineKeyboardButton("–õ–µ—Ç–Ω–∏–π", callback_data='summer')

    markup.add(but_winter, but_summer)

    bot.send_message(message.chat.id, '–ù–∞ –∫–∞–∫–æ–π –ø—Ä–∏–∑—ã–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?', reply_markup=markup)


def is_russian(message):
    markup = types.InlineKeyboardMarkup(row_width=2)

    but_yes = types.InlineKeyboardButton("–î–∞", callback_data='yes_russian')
    but_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data='no_russian')

    markup.add(but_yes, but_no)

    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                          text='–Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –í—ã –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏?', reply_markup=markup)


def is_higher_education(message):
    markup = types.InlineKeyboardMarkup(row_width=2)

    but_yes = types.InlineKeyboardButton("–î–∞", callback_data='yes_university')
    but_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data='no_university')

    markup.add(but_yes, but_no)

    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id,
                          text='–ò–º–µ–µ—Ç—Å—è –ª–∏ —É –í–∞—Å –æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ?', reply_markup=markup)


def is_aged(message):
    try:
        birthdate = datetime.strptime(message.text or "", "%d.%m.%Y")
        age = datetime.now().year - birthdate.year - (
                (datetime.now().month, datetime.now().day) < (birthdate.month, birthdate.day))
        if age < 18 or age > 30:
            go_to_main_menu(message,
                            '–í –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø.–ø."–∞", –ø—É–Ω–∫—Ç–∞ 1, —Å—Ç–∞—Ç—å–∏ 22 \"–ì—Ä–∞–∂–¥–∞–Ω–µ, –ø–æ–¥–ª–µ–∂–∞—â–∏–µ –ø—Ä–∏–∑—ã–≤—É –Ω–∞ –≤–æ–µ–Ω–Ω—É—é —Å–ª—É–∂–±—É\"'
                            '\n–§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞ –æ—Ç 28.03.1998 N 53-–§–ó (—Ä–µ–¥. –æ—Ç 02.10.2024) \"–û –≤–æ–∏–Ω—Å–∫–æ–π –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ\",'
                            '–ø—Ä–∏–∑—ã–≤—É  –Ω–∞  –≤–æ–µ–Ω–Ω—É—é —Å–ª—É–∂–±—É –ø–æ–¥–ª–µ–∂–∞—Ç –≥—Ä–∞–∂–¥–∞–Ω–µ –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞ –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ –æ—Ç 18 –¥–æ 30 –ª–µ—Ç, —Å–æ—Å—Ç–æ—è—â–∏–µ –Ω–∞ –≤–æ–∏–Ω—Å–∫–æ–º —É—á–µ—Ç–µ '
                            '–∏–ª–∏ –Ω–µ —Å–æ—Å—Ç–æ—è—â–∏–µ, –Ω–æ –æ–±—è–∑–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è—Ç—å –Ω–∞ –≤–æ–∏–Ω—Å–∫–æ–º —É—á–µ—Ç–µ –∏ –Ω–µ –ø—Ä–µ–±—ã–≤–∞—é—â–∏–µ –≤ –∑–∞–ø–∞—Å–µ ')
            return
        else:
            bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—àe —Ñ–∞–º–∏–ª–∏—é')
            bot.register_next_step_handler(message, get_surname)
            bot.delete_message(chat_id=message.chat.id, message_id=message.id - 1)
        candidate.date_birth = message.text
    except ValueError:
        bot.send_message(message.from_user.id, '–í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
        bot.register_next_step_handler(message, is_aged)

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    req = call.data.split('_')

    try:
        if call.message:
            if call.data == 'winter':
                candidate.type_recruitment = '–ó–∏–º–Ω–∏–π'
                is_russian(call.message)
            elif call.data == 'summer':
                candidate.type_recruitment = '–õ–µ—Ç–Ω–∏–π'
                is_russian(call.message)
            elif call.data == 'yes_russian':
                is_higher_education(call.message)
            elif call.data == 'no_russian':

                go_to_main_menu(call.message,
                                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞–ª–∏—á–∏–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–∞ –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏ "
                                "—è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏–µ–º –¥–ª—è –æ—Ç–±–æ—Ä–∞ –≤ –Ω–∞—É—á–Ω—É—é —Ä–æ—Ç—É")
                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)
            elif call.data == 'yes_university':
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text='–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–¥–¥.–º–º.–≥–≥–≥–≥)')
                bot.register_next_step_handler(call.message, is_aged)
            elif call.data == 'no_university':
                go_to_main_menu(call.message,
                                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞–ª–∏—á–∏–µ –í—ã—Å—à–µ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —è–≤–ª—è–µ—Ç—Å—è "
                                "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏–µ–º –¥–ª—è –æ—Ç–±–æ—Ä–∞ –≤ –Ω–∞—É—á–Ω—É—é —Ä–æ—Ç—É")
                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)
            elif call.data == 'yes_age':
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
                bot.send_message(call.message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é')
                bot.register_next_step_handler(call.message, get_surname)
            elif call.data == 'no_age':
                go_to_main_menu(call.message,
                                '–í –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø.–ø."–∞", –ø—É–Ω–∫—Ç–∞ 1, —Å—Ç–∞—Ç—å–∏ 22 \"–ì—Ä–∞–∂–¥–∞–Ω–µ, –ø–æ–¥–ª–µ–∂–∞—â–∏–µ –ø—Ä–∏–∑—ã–≤—É –Ω–∞ –≤–æ–µ–Ω–Ω—É—é —Å–ª—É–∂–±—É\"'
                                '–§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞ –æ—Ç 28.03.1998 N 53-–§–ó (—Ä–µ–¥. –æ—Ç 02.10.2024) \"–û –≤–æ–∏–Ω—Å–∫–æ–π –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ\",'
                                '–ø—Ä–∏–∑—ã–≤—É  –Ω–∞  –≤–æ–µ–Ω–Ω—É—é —Å–ª—É–∂–±—É –ø–æ–¥–ª–µ–∂–∞—Ç –≥—Ä–∞–∂–¥–∞–Ω–µ –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞ –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ –æ—Ç 18 –¥–æ 30 –ª–µ—Ç, —Å–æ—Å—Ç–æ—è—â–∏–µ –Ω–∞ –≤–æ–∏–Ω—Å–∫–æ–º —É—á–µ—Ç–µ '
                                '–∏–ª–∏ –Ω–µ —Å–æ—Å—Ç–æ—è—â–∏–µ, –Ω–æ –æ–±—è–∑–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è—Ç—å –Ω–∞ –≤–æ–∏–Ω—Å–∫–æ–º —É—á–µ—Ç–µ –∏ –Ω–µ –ø—Ä–µ–±—ã–≤–∞—é—â–∏–µ –≤ –∑–∞–ø–∞—Å–µ ')
                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)
            elif call.data == 'unseen':
                bot.delete_message(call.message.chat.id, call.message.message_id)

            elif 'pagination' in call.data:

                # –†–∞—Å—Å–ø–∞—Ä—Å–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π JSON
                json_string = json.loads(req[0])

                df = excel_to_2d_array('faq.xlsx')

                count_questions = (len(df) - 1)
                count_pages = (len(df) - 1) // 4
                if (len(df) - 1) % 4 != 0:
                    count_pages += 1

                page = json_string['NumberPage']

                # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º markup
                markup = InlineKeyboardMarkup()

                index = json_string['IndexQuestion']
                finish_index = index + 3

                while index <= finish_index and index <= count_questions:
                    question = df[1][index]
                    answer = df[2][index]
                    markup.add(InlineKeyboardButton(text=question,
                                                    callback_data='{\"method\":\"faq\",\"index\":' + str(
                                                        index) + '}'))
                    index += 1

                markup.add(InlineKeyboardButton(text='–°–∫—Ä—ã—Ç—å', callback_data='unseen'))

                # markup –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if page == 1:
                    markup.add(InlineKeyboardButton(text=f'{page}/{count_pages}', callback_data=f' '),
                               InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ --->',
                                                    callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                        page + 1) + ",\"IndexQuestion\":" + str(index) + "}"))
                # markup –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                elif page == count_pages:
                    markup.add(InlineKeyboardButton(text=f'<--- –ù–∞–∑–∞–¥',
                                                    callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                        page - 1) + ",\"IndexQuestion\":" + str(index - 6) + "}"),
                               InlineKeyboardButton(text=f'{page}/{count_pages}', callback_data=f' '))
                # markup –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                else:
                    markup.add(InlineKeyboardButton(text=f'<--- –ù–∞–∑–∞–¥',
                                                    callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                        page - 1) + ",\"IndexQuestion\":" + str(index - 8) + "}"),
                               InlineKeyboardButton(text=f'{page}/{count_pages}', callback_data=f' '),
                               InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ --->',
                                                    callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                        page + 1) + ",\"IndexQuestion\":" + str(index) + "}"))

                # bot.send_message(call.message.chat.id, text=f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å</b>', parse_mode="HTML",
                #                  reply_markup=markup)
                bot.edit_message_text(text=f'<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å:</b>', parse_mode='HTML',
                                      reply_markup=markup, chat_id=call.message.chat.id,
                                      message_id=call.message.message_id)

            elif 'faq' in call.data:
                json_string = json.loads(req[0])
                df = excel_to_2d_array('faq.xlsx')

                index = json_string['index']

                question = df[1][index]
                answer = df[2][index]

                bot.send_message(call.message.chat.id, text=f'<b>' + question + '</b>\n' + answer, parse_mode='HTML')


            elif 'answer' in call.data:
                json_string = json.loads(req[0])
                df = excel_to_2d_array('questions.xlsx')
                page = json_string['NumberPage']

                id = df[1][page]
                question = df[3][page]

                bot.send_message(call.message.chat.id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n" + question)
                bot.register_next_step_handler(call.message, get_answer, page, question, id)

            elif 'question' in call.data:
                json_string = json.loads(req[0])

                df = excel_to_2d_array('questions.xlsx')

                page = json_string['NumberPage']
                count_pages = len(df) - 1

                question = df[3][page]

                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton(text='–û—Ç–≤–µ—Ç–∏—Ç—å', callback_data="{\"method\":\"answer\",\"NumberPage\":"
                                                                               + str(page) + "}"))
                # markup –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                if page == 1:
                    markup.add(InlineKeyboardButton(text=f'{page}/{count_pages}', callback_data=f' '),
                               InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ --->',
                                                    callback_data="{\"method\":\"question\",\"NumberPage\":" + str(
                                                        page + 1) + ",\"IndexQuestion\":" + str(page) + "}"))
                # markup –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                elif page == count_pages:
                    markup.add(InlineKeyboardButton(text=f'<--- –ù–∞–∑–∞–¥',
                                                    callback_data="{\"method\":\"question\",\"NumberPage\":" + str(
                                                        page - 1) + ",\"IndexQuestion\":" + str(page - 1) + "}"),
                               InlineKeyboardButton(text=f'{page}/{count_pages}', callback_data=f' '))
                # markup –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                else:
                    markup.add(InlineKeyboardButton(text=f'<--- –ù–∞–∑–∞–¥',
                                                    callback_data="{\"method\":\"question\",\"NumberPage\":" + str(
                                                        page - 1) + ",\"IndexQuestion\":" + str(page + -1) + "}"),
                               InlineKeyboardButton(text=f'{page}/{count_pages}', callback_data=f' '),
                               InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ --->',
                                                    callback_data="{\"method\":\"question\",\"NumberPage\":" + str(
                                                        page + 1) + ",\"IndexQuestion\":" + str(page + 1) + "}"))

                bot.edit_message_text(text=question, parse_mode='HTML',
                                      reply_markup=markup, chat_id=call.message.chat.id,
                                      message_id=call.message.message_id)
            # elif call.data == 'new_question':
            #     df = excel_to_2d_array('questions.xlsx')
            #
            #     question = df[][]
            elif call.data == 'send_phone_number':
                bot.register_next_step_handler(call.message, send_docs)

    except Exception as e:
        print(repr(e))


def excel_to_2d_array(name_doc):
    wb = load_workbook('documents/' + name_doc)
    sheet = wb.active
    df = pd.DataFrame(sheet.values)
    return df


bot.polling()

